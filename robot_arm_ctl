import cv2
import numpy as np

# 函数：计算质心
def calculate_centroid(x, y, w, h):
    cx = x + w // 2
    cy = y + h // 2
    return cx, cy

# 设置颜色范围（这里以蓝色为例）
lower_blue = np.array([100, 150, 0])  # 低范围 (Hue, Saturation, Value)
upper_blue = np.array([140, 255, 255])  # 高范围

# 捕获摄像头画面
cap = cv2.VideoCapture(0)  # 参数为0时，打开默认摄像头

# 初始化变量，记录上一次的质心坐标
last_centroids = []

while True:
    # 读取摄像头图像
    ret, frame = cap.read()
    
    if not ret:
        print("无法读取摄像头数据")
        break

    # 转换为HSV颜色空间
    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)

    # 根据颜色范围创建掩模
    mask = cv2.inRange(hsv, lower_blue, upper_blue)

    # 使用形态学操作来减少噪声（闭运算 -> 开运算）
    kernel = np.ones((5, 5), np.uint8)
    mask = cv2.morphologyEx(mask, cv2.MORPH_CLOSE, kernel)
    mask = cv2.morphologyEx(mask, cv2.MORPH_OPEN, kernel)

    # 通过掩模筛选出指定颜色的物体
    # result = cv2.bitwise_and(frame, frame, mask=mask)

    # 寻找轮廓
    contours, _ = cv2.findContours(mask, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)

    current_centroids = []

    for contour in contours:
        # 排除小面积的噪声
        if cv2.contourArea(contour) < 500:
            continue

        # 计算边界框
        x, y, w, h = cv2.boundingRect(contour)
        
        # 计算质心坐标
        cx, cy = calculate_centroid(x, y, w, h)
        current_centroids.append((cx, cy))

        # 在原始帧中绘制矩形框和质心
        cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 2)
        cv2.circle(frame, (cx, cy), 5, (255, 0, 0), -1)

        # 在黑白图（掩模）中绘制矩形框和质心
        cv2.rectangle(mask, (x, y), (x + w, y + h), 255, 2)
        cv2.circle(mask, (cx, cy), 5, 255, -1)

        # 显示质心坐标
        cv2.putText(frame, f"Centroid: ({cx}, {cy})", (x, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 2)

    # 只有当质心发生变化时，输出质心坐标
    if current_centroids != last_centroids:
        for cx, cy in current_centroids:
            print(f"Object centroid at: ({cx}, {cy})")

    # 更新上一次的质心坐标
    last_centroids = current_centroids.copy()

    # 显示图像
    cv2.imshow("Original Frame", frame)
    cv2.imshow("Mask (Black & White)", mask)
    # cv2.imshow("Result (Color Detection)", result)

    # 按下 'q' 键退出循环
    if cv2.waitKey(100) & 0xFF == ord('q'):  # 调整waitKey的参数，减慢输出速度
        break

# 释放摄像头并关闭所有窗口
cap.release()
cv2.destroyAllWindows()
