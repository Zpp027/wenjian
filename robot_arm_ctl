import rclpy
from rclpy.node import Node
from sensor_msgs.msg import Image
import cv2
from cv_bridge import CvBridge
import numpy as np


class MinimalSubscriber(Node):

    def __init__(self, name):
        super().__init__(name)
        self.subscription = self.create_subscription(
            Image, '/image_raw', self.listener_callback, 10)
        self.br = CvBridge()
        self.last_centroids = []  # 质心的历史记录
        
    def object_detect(self, image):
        # Helper function to calculate centroid
        def calculate_centroid(rect):
            cx, cy = rect[0]  # rect[0] contains the center of the rotated rectangle
            return int(cx), int(cy)

        # 颜色范围（可以添加更多颜色）
        color_ranges = {
            "blue": ([100, 150, 0], [140, 255, 255]),   # 蓝色范围
            "green": ([40, 100, 50], [80, 255, 255]),   # 绿色范围
            "red": ([0, 150, 50], [10, 255, 255])       # 红色范围
        }

        # 显示不同颜色的轮廓颜色 (BGR format)
        color_boxes = {
            "blue": (255, 0, 0),   # 蓝色框
            "green": (0, 255, 0),  # 绿色框
            "red": (0, 0, 255)     # 红色框
        }

        hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)

        # 创建一个空的总掩模图像（初始为全黑）
        combined_mask = np.zeros_like(cv2.inRange(hsv, np.array([0, 0, 0]), np.array([0, 0, 0])))

        # 存储所有颜色质心
        all_centroids = []

        for color, (lower, upper) in color_ranges.items():
            lower_color = np.array(lower)
            upper_color = np.array(upper)

            # Create mask based on color range
            mask = cv2.inRange(hsv, lower_color, upper_color)

            # Morphological operations to reduce noise
            kernel = np.ones((5, 5), np.uint8)
            mask = cv2.morphologyEx(mask, cv2.MORPH_CLOSE, kernel)
            mask = cv2.morphologyEx(mask, cv2.MORPH_OPEN, kernel)

            # 将当前颜色的掩模叠加到总掩模中
            combined_mask = cv2.bitwise_or(combined_mask, mask)

            # Find contours for the current color
            contours, _ = cv2.findContours(mask, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)

            current_centroids = []

            for contour in contours:
                if cv2.contourArea(contour) < 500:
                    continue

                # Calculate minimum area rectangle (rotated rectangle)
                rect = cv2.minAreaRect(contour)
                box = cv2.boxPoints(rect)
                box = np.int0(box)  # Convert points to integer

                # Get the centroid of the rectangle
                cx, cy = calculate_centroid(rect)
                current_centroids.append((cx, cy))

                # Draw the rotated rectangle on the original image
                cv2.drawContours(image, [box], 0, color_boxes[color], 2)
                cv2.circle(image, (cx, cy), 5, (255, 255, 255), -1)  # 质心用白色标记

                # Show centroid text on image
                cv2.putText(image, f"{color.capitalize()} Centroid: ({cx}, {cy})", 
                            (int(cx), int(cy) - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 0), 2)

            all_centroids.extend(current_centroids)

        # 输出质心变化
        if all_centroids != self.last_centroids:
            for cx, cy in all_centroids:
                print(f"Object centroid at: ({cx}, {cy})")
        
        # 更新质心信息
        self.last_centroids = all_centroids.copy()

        # 显示原始图像和合并的二值掩模图像
        cv2.imshow("Original Frame", image)
        cv2.imshow("Combined Mask (All Colors)", combined_mask)
        cv2.waitKey(10)

    def listener_callback(self, data):
        self.get_logger().info('Receiving image')
        image = self.br.imgmsg_to_cv2(data, 'bgr8')
        self.object_detect(image)


def main(args=None):
    rclpy.init(args=args)
    node = MinimalSubscriber('minimal_subscriber')
    rclpy.spin(node)
    node.destroy_node()
    rclpy.shutdown()
