import rclpy
from rclpy.node import Node
from sensor_msgs.msg import Image
import cv2
from cv_bridge import CvBridge
import numpy as np


class MinimalSubscriber(Node):

    def __init__(self, name):
        super().__init__(name)
        self.subscription = self.create_subscription(
            Image, '/image_raw', self.listener_callback, 10)
        self.br = CvBridge()
        self.last_centroids = []  # 把 last_centroids 定义为类的实例变量
        
    def object_detect(self, image):
        # Helper function to calculate centroid
        def calculate_centroid(rect):
            cx, cy = rect[0]  # rect[0] contains the center of the rotated rectangle
            return int(cx), int(cy)

        # Set blue color range
        lower_blue = np.array([100, 150, 0])
        upper_blue = np.array([140, 255, 255])

        # Convert to HSV
        hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)

        # Create mask based on color range
        mask = cv2.inRange(hsv, lower_blue, upper_blue)

        # Morphological operations to reduce noise
        kernel = np.ones((5, 5), np.uint8)
        mask = cv2.morphologyEx(mask, cv2.MORPH_CLOSE, kernel)
        mask = cv2.morphologyEx(mask, cv2.MORPH_OPEN, kernel)

        # Find contours
        contours, _ = cv2.findContours(mask, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)

        current_centroids = []

        for contour in contours:
            if cv2.contourArea(contour) < 500:
                continue

            # Calculate minimum area rectangle (rotated rectangle)
            rect = cv2.minAreaRect(contour)
            box = cv2.boxPoints(rect)
            box = np.int0(box)  # Convert points to integer

            # Get the centroid of the rectangle
            cx, cy = calculate_centroid(rect)
            current_centroids.append((cx, cy))

            # Draw the rotated rectangle on the original image
            cv2.drawContours(image, [box], 0, (0, 255, 0), 2)
            cv2.circle(image, (cx, cy), 5, (255, 0, 0), -1)

            # Draw on mask (black & white)
            cv2.drawContours(mask, [box], 0, 255, 2)
            cv2.circle(mask, (cx, cy), 5, 255, -1)

            # Show centroid text on image
            cv2.putText(image, f"Centroid: ({cx}, {cy})", (int(cx), int(cy) - 10),
                        cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 2)

        # 输出质心变化
        if current_centroids != self.last_centroids:
            for cx, cy in current_centroids:
                print(f"Object centroid at: ({cx}, {cy})")
        
        # 更新质心信息
        self.last_centroids = current_centroids.copy()

        # 显示图像
        cv2.imshow("Original Frame", image)
        cv2.imshow("Mask (Black & White)", mask)
        cv2.waitKey(10)

    def listener_callback(self, data):
        self.get_logger().info('Receiving image')
        image = self.br.imgmsg_to_cv2(data, 'bgr8')
        self.object_detect(image)


def main(args=None):
    rclpy.init(args=args)
    node = MinimalSubscriber('minimal_subscriber')
    rclpy.spin(node)
    node.destroy_node()
    rclpy.shutdown()
